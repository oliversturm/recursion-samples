#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":".NET"},{"aliases":["C#","c#"],"languageName":"C#","name":"csharp"},{"aliases":["F#","f#"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"},{"aliases":["frontend"],"name":"vscode"},{"aliases":[],"name":"webview"}]}}

#!markdown

## Factorial implementation in a purely procedural style

#!csharp

int Factorial(int x) {
  int result = 1;
  for (int v = 2; v <= x; v++)
    result = result * v;
  return result;
}

Console.WriteLine(Factorial(5));

#!markdown

## Now let's do it recursively

#!csharp

int Factorial(int x) => x > 0 ? x * Factorial(x - 1) : 1;

Console.WriteLine(Factorial(5));

#!markdown

## A recursive F# implementation

#!fsharp

let rec fact x = if x > 0 then x * (fact (x - 1)) else 1

printfn "%d" (fact 5)
